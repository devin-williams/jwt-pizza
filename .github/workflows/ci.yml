name: CI Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: pizza_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Checkout backend service
        uses: actions/checkout@v4
        with:
          repository: devin-williams/jwt-pizza-service
          path: jwt-pizza-service

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "23.x"

      - name: set version
        id: set_version
        run: |
          version=$(date +'%Y%m%d.%H%M%S')
          echo "version=$version" >> "$GITHUB_OUTPUT"
          printf '{"version": "%s" }' "$version" > public/version.json

      - name: Install frontend dependencies
        run: npm ci

      - name: Install backend dependencies
        run: |
          cd jwt-pizza-service
          npm ci

      - name: Create backend test config
        run: |
          cat > jwt-pizza-service/src/config.js << EOF
          module.exports = {
            jwtSecret: "${{ secrets.JWT_SECRET }}",
            db: {
              connection: {
                host: "127.0.0.1",
                user: "root",
                password: "test",
                database: "pizza_test",
                connectTimeout: 60000,
              },
              listPerPage: 10,
            },
            factory: {
              url: "https://pizza-factory.cs329.click",
              apiKey: "${{ secrets.FACTORY_API_KEY }}",
            },
          };
          EOF

      - name: Wait for MySQL to be ready
        run: |
          sudo apt-get install -y mysql-client
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -P3306 -uroot -ptest --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run tests with backend
        env:
          VITE_COVERAGE: true
          NODE_ENV: test
        run: npm run test:ci

      - name: Check coverage threshold
        run: |
          coverage=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          echo "Coverage: $coverage%"
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "Coverage $coverage% is below the required 80% threshold"
            exit 1
          fi

      - name: Update coverage
        run: |
          coverage=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          color=$(echo "$coverage < 80" | bc | awk '{if ($1) print "red"; else print "green"}')
          curl -s -X POST "https://pizza-factory.cs329.click/api/badge/${{ secrets.NET_ID }}/jwtpizzacoverage?label=Coverage&value=$coverage%25&color=$color" -H "authorization: bearer ${{ secrets.FACTORY_API_KEY }}"

      - name: Build
        run: |
          npm ci && npm run build

      - name: Update dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: dist/
  deploy:
    needs: build
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    env:
      version: ${{needs.build.outputs.version}}
    steps:
      - name: Create OIDC token to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.CI_IAM_ROLE }}

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: package
          path: dist/

      - name: Push to AWS S3
        run: |
          echo Deploying $version
          aws s3 cp dist s3://${{ secrets.APP_BUCKET }} --recursive
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION_ID }} --paths "/*"
